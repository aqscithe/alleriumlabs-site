---
import '../../styles/global.css';
import '../../styles/devlog.css';
import '../../styles/devlog-post.css';

// Get all devlog entries for static generation
export async function getStaticPaths() {
  const devlogEntries: any[] = await Astro.glob('../../devlogs/*.md');
  
  // Sort entries by date for navigation
  const sortedEntries = devlogEntries
    .filter((entry: any) => entry.frontmatter && entry.frontmatter.date && entry.frontmatter.title)
    .sort((a: any, b: any) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime());
  
  return sortedEntries.map((entry: any, index: number) => {
    const slug = entry.file.split('/').pop()?.replace('.md', '');
    const previousPost = index < sortedEntries.length - 1 ? sortedEntries[index + 1] : null;
    const nextPost = index > 0 ? sortedEntries[index - 1] : null;
    
    return {
      params: { slug },
      props: { 
        entry,
        previousPost,
        nextPost
      }
    };
  });
}

const { entry, previousPost, nextPost } = Astro.props;
const { Content } = entry;

// Function to format date
function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long',
    day: 'numeric'
  });
}

// Calculate reading time
const content = await entry.compiledContent();
const wordsPerMinute = 200;
const words = content.split(/\s+/).length;
const readingTime = Math.ceil(words / wordsPerMinute);
---

<html lang="en" data-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <title>{entry.frontmatter.title} - Devlog - Allerium Labs</title>
    <meta name="description" content={entry.frontmatter.excerpt} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article" />
    <meta property="og:title" content={entry.frontmatter.title} />
    <meta property="og:description" content={entry.frontmatter.excerpt} />
    {entry.frontmatter.image && <meta property="og:image" content={entry.frontmatter.image} />}
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={entry.frontmatter.title} />
    <meta property="twitter:description" content={entry.frontmatter.excerpt} />
    {entry.frontmatter.image && <meta property="twitter:image" content={entry.frontmatter.image} />}
  </head>
  <body>
    <main class="devlog-post-main">
      <!-- Header -->
      <header class="devlog-post-header">
        <div class="container">
          <nav class="post-nav">
            <a href="/devlog" class="back-link">← Back to Devlog</a>
            <a href="/" class="home-link">Home</a>
          </nav>
          
          <div class="post-header-content">
            <div class="post-meta">
              <time class="post-date">{formatDate(entry.frontmatter.date)}</time>
              <span class="post-reading-time">{readingTime} min read</span>
            </div>
            <h1 class="post-title">{entry.frontmatter.title}</h1>
            <p class="post-excerpt">{entry.frontmatter.excerpt}</p>
            
            <div class="post-tags">
              {entry.frontmatter.tags && entry.frontmatter.tags.map((tag: string) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          </div>
        </div>
      </header>

      <!-- Featured Image -->
      {entry.frontmatter.image && (
        <section class="featured-image">
          <div class="container">
            <img src={entry.frontmatter.image} alt={entry.frontmatter.title} />
          </div>
        </section>
      )}

      <!-- Content -->
      <article class="devlog-post-content">
        <div class="container">
          <div class="content-wrapper">
            <div class="prose">
              <Content />
            </div>
            <!-- TOC will be inserted here by JavaScript -->
          </div>
        </div>
      </article>

      <!-- Enhanced Post Navigation -->
      <nav class="post-navigation">
        <div class="container">
          <div class="post-nav-grid">
            {previousPost && (
              <a href={`/devlog/${previousPost.file.split('/').pop()?.replace('.md', '')}`} class="nav-post-card nav-post-previous">
                <div class="nav-post-label">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="15,18 9,12 15,6"></polyline>
                  </svg>
                  Previous Post
                </div>
                <div class="nav-post-title">{previousPost.frontmatter.title}</div>
                <div class="nav-post-excerpt">{previousPost.frontmatter.excerpt}</div>
                <div class="nav-post-meta">
                  <span>{formatDate(previousPost.frontmatter.date)}</span>
                  {previousPost.frontmatter.tags && (
                    <span>{previousPost.frontmatter.tags.length} tags</span>
                  )}
                </div>
              </a>
            )}
            
            {nextPost && (
              <a href={`/devlog/${nextPost.file.split('/').pop()?.replace('.md', '')}`} class="nav-post-card nav-post-next">
                <div class="nav-post-label">
                  Next Post
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="9,18 15,12 9,6"></polyline>
                  </svg>
                </div>
                <div class="nav-post-title">{nextPost.frontmatter.title}</div>
                <div class="nav-post-excerpt">{nextPost.frontmatter.excerpt}</div>
                <div class="nav-post-meta">
                  <span>{formatDate(nextPost.frontmatter.date)}</span>
                  {nextPost.frontmatter.tags && (
                    <span>{nextPost.frontmatter.tags.length} tags</span>
                  )}
                </div>
              </a>
            )}
          </div>
          
          <div style="text-align: center; margin-top: 2rem;">
            <a href="/devlog" class="nav-button">← All Devlog Posts</a>
          </div>
        </div>
      </nav>

      <!-- Footer -->
      <footer class="devlog-footer">
        <div class="container">
          <div class="footer-content">
            <p>&copy; 2025 Allerium Labs. All rights reserved.</p>
            <a href="/contact" class="footer-contact-link">Get in Touch</a>
          </div>
        </div>
      </footer>
    </main>

    <!-- Section Jump Controls -->
    <div class="section-jump-controls">
      <button class="section-jump-btn" id="scrollToTop" title="Scroll to top">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="18,15 12,9 6,15"></polyline>
        </svg>
      </button>
    </div>
    

    <!-- Navigation Script -->
    <script>
      import { DevlogNavigation } from '../../scripts/devlogNavigation.ts';
      
      // Auto-initialize for devlog posts
      document.addEventListener('DOMContentLoaded', () => {
        if (document.querySelector('.devlog-post-main')) {
          console.log('[DevlogNavigation] Initializing on devlog post page');
          new DevlogNavigation();
        } else {
          console.log('[DevlogNavigation] Not a devlog post page, skipping init');
        }
      });
    </script>
    
    <!-- Scroll to top functionality -->
    <script>
      function initScrollToTop() {
        console.log('[ScrollToTop] Initializing...');
        const btn = document.getElementById('scrollToTop');
        console.log('[ScrollToTop] Button found:', btn);
        
        if (!btn) {
          console.error("[ScrollToTop] Button #scrollToTop not found");
          return;
        }
        
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          console.log('[ScrollToTop] Scrolling to top');
          
          window.scrollTo({ 
            top: 0, 
            behavior: 'smooth' 
          });
        });
        
        console.log('[ScrollToTop] Event listener attached');
      }

      // Try multiple initialization methods
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initScrollToTop);
      } else {
        initScrollToTop();
      }
    </script>
  </body>
</html> 